/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package firefoxbackup;

import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.taskdefs.Zip;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.zip.ZipEntry;
import org.apache.tools.zip.ZipFile;

/**
 *
 * @author HuangDao
 */
public class initUI extends javax.swing.JFrame {

    /**
     * Creates new form initUI
     */
    public initUI() {
        df = new SimpleDateFormat("yyyy-MM-dd");//设置日期格式

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        backUpButton = new javax.swing.JButton();
        reviveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("火狐备份小工具");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("微软雅黑", 0, 10)); // NOI18N
        setMinimumSize(new java.awt.Dimension(220, 33));
        setResizable(false);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${defaultCloseOperation}"), this, org.jdesktop.beansbinding.BeanProperty.create("defaultCloseOperation"));
        bindingGroup.addBinding(binding);

        getContentPane().setLayout(new java.awt.FlowLayout());

        backUpButton.setText("备份");
        backUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backUpButtonActionPerformed(evt);
            }
        });
        getContentPane().add(backUpButton);

        reviveButton.setText("恢复");
        reviveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reviveButtonActionPerformed(evt);
            }
        });
        getContentPane().add(reviveButton);

        bindingGroup.bind();

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-220)/2, (screenSize.height-70)/2, 220, 70);
    }// </editor-fold>//GEN-END:initComponents

    private void reviveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reviveButtonActionPerformed
        JOptionPane.showMessageDialog(this, "请确保火狐已经关闭", "提示", JOptionPane.INFORMATION_MESSAGE);
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setDialogTitle("请打开备份文件");
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Zip", "zip");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                System.out.println("You chose to open this file: "
                        + chooser.getSelectedFile());
                File archive = chooser.getSelectedFile();
                BufferedInputStream bi;

                ZipFile zf = new ZipFile(archive, "GBK");//支持中文   
                String decompressDir = "C:\\Users\\HD\\AppData";
                Enumeration e = zf.getEntries();
                JOptionPane.showMessageDialog(this, "开始恢复,请稍后", "提示", JOptionPane.INFORMATION_MESSAGE);
                while (e.hasMoreElements()) {
                    ZipEntry ze2 = (ZipEntry) e.nextElement();
                    String entryName = ze2.getName();
                    String path = decompressDir + "/" + entryName;
                    if (ze2.isDirectory()) {
                        System.out.println("正在创建解压目录 - " + entryName);
                        File decompressDirFile = new File(path);
                        if (!decompressDirFile.exists()) {
                            decompressDirFile.mkdirs();
                        }
                    } else {
                        System.out.println("正在创建解压文件 - " + entryName);
                        String fileDir = path.substring(0, path.lastIndexOf("/"));
                        File fileDirFile = new File(fileDir);
                        if (!fileDirFile.exists()) {
                            fileDirFile.mkdirs();
                        }
                        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(
                                decompressDir + "/" + entryName));

                        bi = new BufferedInputStream(zf.getInputStream(ze2));
                        byte[] readContent = new byte[1024];
                        int readCount = bi.read(readContent);
                        while (readCount != -1) {
                            bos.write(readContent, 0, readCount);
                            readCount = bi.read(readContent);
                        }
                        bos.close();

                    }
                }
                zf.close();
                JOptionPane.showMessageDialog(this, "恢复完成", "提示", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                Logger.getLogger(initUI.class.getName()).log(Level.SEVERE, null, ex);
            }



        }

    }//GEN-LAST:event_reviveButtonActionPerformed

    private void backUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backUpButtonActionPerformed
        Map<String, String> map = System.getenv();
        System.out.println(map.get("USERNAME"));//获取用户名  
        System.out.println(map.get("COMPUTERNAME"));//获取计算机名  
        System.out.println(map.get("USERDOMAIN"));//获取计算机域名  


        JOptionPane.showMessageDialog(this, "请在关闭火狐后选择备份文件保存路径", "提示", JOptionPane.INFORMATION_MESSAGE);
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setDialogTitle("请选择备份文件保存目录");
        int returnVal = chooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            System.out.println("You chose to open this file: "
                    + chooser.getSelectedFile());
            String pathName = chooser.getSelectedFile() + "\\火狐配置备份文件" + df.format(new Date()) + ".zip";
            File zipFile = new File(pathName);
            File srcdir = new File("C:\\Users\\" + map.get("USERNAME") + "\\AppData");
            Project prj = new Project();
            Zip zip = new Zip();
            zip.setProject(prj);
            zip.setDestFile(zipFile);
            FileSet fileSet = new FileSet();
            fileSet.setProject(prj);
            fileSet.setDir(srcdir);

            fileSet.setIncludes("**/Mozilla/**"); //包括哪些文件或文件夹 eg:zip.setIncludes("*.java");
            //fileSet.setExcludes(...); 排除哪些文件或文件夹
            zip.addFileset(fileSet);
            System.out.println("开始");
            JOptionPane.showMessageDialog(this, "开始备份,请稍后", "提示", JOptionPane.INFORMATION_MESSAGE);
            zip.execute();
            System.out.println("结束");
            JOptionPane.showMessageDialog(this, "备份完成", "提示", JOptionPane.INFORMATION_MESSAGE);
            JDialog jdialog = new JDialog(this,
                    "完成", true);
            jdialog.setVisible(true);
        }
    }//GEN-LAST:event_backUpButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(initUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(initUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(initUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(initUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                Properties props = System.getProperties();
                System.out.println("操作系统的名称：" + props.getProperty("os.name"));
                System.out.println("操作系统的版本：" + props.getProperty("os.version"));
                if (!props.getProperty("os.name").equals("windows 7")) {
                    JOptionPane.showMessageDialog(null, "仅支持win7系统", "错误", JOptionPane.ERROR_MESSAGE);
                    System.exit(0);
                }
                new initUI().setVisible(true);
            }
        });
    }
    private static SimpleDateFormat df;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backUpButton;
    private javax.swing.JButton reviveButton;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
